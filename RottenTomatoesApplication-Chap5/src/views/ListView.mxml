<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:rottentomatoes="com.rottentomatoes.*"
		viewActivate="_onView_ViewActivateHandler(event)">
	<fx:Script>
		<![CDATA[
			import com.rottentomatoes.events.RottenTomatoesFaultEvent;
			import com.rottentomatoes.events.RottenTomatoesResultEvent;
			import com.unitedmindset.managers.SQLPersistenceManager;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			
			import spark.events.IndexChangeEvent;
			import spark.events.ViewNavigatorEvent;
			import spark.managers.IPersistenceManager;
			import spark.managers.PersistenceManager;
			
			private function _onView_ViewActivateHandler(event:ViewNavigatorEvent):void
			{
				//get the context
				var context:String = navigator.context as String;
				//set the view title to use the context string
				title = context;
				//persistence layer
				//access the persistencemanager
				var persistence:IPersistenceManager = new SQLPersistenceManager();
				persistence.load();
				//get any possible existing data
				var listData:ArrayList = persistence.getProperty(title) as ArrayList;
				//get the timestamp
				var timestamp:Number = persistence.getProperty(title+" Timestamp") as Number;
				//check if the timestamp is old
				var dataIsValid:Boolean;
				//check that the timestamp exists
				if(!isNaN(timestamp))
					dataIsValid = (new Date().time - 3600000 /* one day */) < timestamp;
				//if the data exists, set it to the view and stop the function
				if(listData && dataIsValid)
				{
					list.dataProvider = listData;
					return;
				}
				//add the result handler
				service.addEventListener(RottenTomatoesResultEvent.RESULT, _onService_ResultHandler);
				//add the fault handler
				service.addEventListener(RottenTomatoesFaultEvent.FAULT, _onService_FaultHandler);
				//make a service call based on the context
				switch(context)
				{
					case "In Theaters":
						service.getInTheaterMovies();
						break;
					case "Box Office":
						service.getBoxOfficeMovies();
						break;
					case "Opening Now":
						service.getOpeningMovies();
						break;
					case "Coming Soon To Theaters":
						service.getUpcomingMovies();
						break;
					case "Top Movie Rentals":
						service.getTopRentals();
						break;
					case "Currently on DVD":
						service.getCurrentReleaseDvd();
						break;
					case "New To DVD":
						service.getNewReleaseDvd();
						break;
					case "Soon To DVD":
						service.getUpcomingDvd();
						break;
				}
			}
			
			private function _onService_ResultHandler(event:RottenTomatoesResultEvent):void
			{
				//arraylist for dataprovider
				var listData:ArrayList = new ArrayList(event.result as Array);
				//set the list dataprovider with the service results
				list.dataProvider = listData;
				//access the persistencemanager
				var persistence:IPersistenceManager = new SQLPersistenceManager();
				persistence.load();
				//set the data to the persistence layer
				persistence.setProperty(title, listData);
				//set the timestamp
				persistence.setProperty(title+" Timestamp", new Date().time);
				//store the data
				persistence.save();
			}
			
			private function _onService_FaultHandler(event:RottenTomatoesFaultEvent):void
			{
				/// ... service fault handler
				errorLabel.visible = errorLabel.includeInLayout = true;
				errorLabel.text = event.fault.faultDetail;
			}
			
			private function _onList_ChangeHandler(event:IndexChangeEvent):void
			{
				//push view on navigator
				navigator.pushView(DetailsView, list.selectedItem);
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<rottentomatoes:RottenTomatoesService id="service"
											  apikey="z2eq9xmy8zpdezazprruedz2"/>
	</fx:Declarations>
	<!-- list of movie titles -->
	<s:List width="100%" height="100%" id="list"
			change="_onList_ChangeHandler(event)">
		<s:itemRenderer>
			<fx:Component>
				<s:IconItemRenderer
					iconField="thumbnailPoster" 
					iconWidth="61" iconHeight="91"
					labelField="title"/>
			</fx:Component>
		</s:itemRenderer>
	</s:List>
	
	<!-- error label -->
	<s:Label id="errorLabel" width="100%" 
			 backgroundColor="#000000" color="#FFFFFF"
			 paddingBottom="20" paddingTop="20" 
			 textAlign="center" verticalCenter="0"
			 visible="false" includeInLayout="false"/>
</s:View>
