<?xml version="1.0" encoding="UTF-8"?>
<project name="iOS Build File" basedir="." default="build">
	<!-- setup -->
	<description>Build Script for Rotten Tomatoes Application</description>
	<property file="build.properties"/>
	<taskdef name="mxmlc" classname="flex.ant.MxmlcTask" classpath="${FLEX_TASKS}"/>
	<taskdef name="compc" classname="flex.ant.CompcTask" classpath="${FLEX_TASKS}"/>
	<taskdef name="asdoc" classname="flex.ant.AsDocTask" classpath="${FLEX_TASKS}"/>
	
	<!-- build -->
	<target name="build">
		<antcall target="-preclean"/>
		<antcall target="run-tests"/>
		<antcall target="package"/>
		<antcall target="run-asdoc"/>
		<antcall target="-postclean"/>
	</target>
	
	<target name="-preclean">
		<!-- remove folders -->
		<delete dir="${BUILD_DIR}" failonerror="false" includeemptydirs="true"/>
		<delete dir="${RELEASE_DIR}" failonerror="false" includeemptydirs="true"/>
		<!-- create folders -->
		<mkdir dir="${BUILD_DIR}"/>
		<mkdir dir="${RELEASE_DIR}"/>
	</target>
	
	<target name="-postclean">
		<delete dir="${BUILD_DIR}" failonerror="false" includeemptydirs="true"/>
	</target>
	
	<target name="package">
		<antcall target="-move-anes"/>
		<antcall target="-compile"/>
		<antcall target="-move-descriptor"/>
		<antcall target="-move-assets"/>
		<antcall target="-package-ios"/>
	</target>
	
	<target name="-move-anes">
		<copy file="${ANES_DIR}/com.adobe.extensions.Vibration.ane" tofile="${BUILD_DIR}/Vibration.swc"/>
	</target>
		
	<target name="-compile">
		<mxmlc file="${SRC_DIR}/RottenTomatoesIOS.mxml"
			output="${BUILD_DIR}/RottenTomatoesIOS.swf"
			debug="false" 
			failonerror="true"
			fork="true" maxmemory="512m">
			<load-config filename="${FLEX_HOME}/frameworks/airmobile-config.xml" />
			<source-path path-element="${SRC_DIR}"/>
			<library-path dir="${LIBS_DIR}" includes="*.swc" append="true"/>
			<library-path dir="${LIBRARY_DIR}/bin" includes="*.swc" append="true"/>
			<external-library-path dir="${BUILD_DIR}" includes="*.swc" append="true"/>
		</mxmlc>
	</target>
	
	<target name="-move-descriptor">
		<copy todir="${BUILD_DIR}" file="${SRC_DIR}/RottenTomatoesIOS-app.xml" overwrite="true"/>
		<replace file="${BUILD_DIR}/RottenTomatoesIOS-app.xml" token="${CONTENT_REPLACE_STRING}" value="RottenTomatoesIOS.swf"/>
	</target>
	
	<target name="-move-assets">
		<copy todir="${BUILD_DIR}/assets" includeemptydirs="false" overwrite="true">
	        <fileset dir="${ASSETS_DIR}">
	        	<include name="**/*.png"/>
	        </fileset>
	    </copy>
	</target>
	
	<target name="-package-ios">
		<exec executable="${ADT}" failonerror="true">
			<arg line="-package"/>
			<arg line="-target ipa-app-store"/>
			<arg line="-provisioning-profile ${PROVISIONING_FILE}"/>
			<arg line="-storetype ${STORETYPE}"/>
			<arg line="-keystore ${KEYSTORE}"/>
			<arg line="-storepass ${CERT_PASSWORD}"/>
			<arg line="${RELEASE_DIR}/RottenTomatoesIOS.ipa"/>
			<arg line="${BUILD_DIR}/RottentomatoesIOS-app.xml"/>
			<arg line="-C ${BUILD_DIR} RottenTomatoesIOS.swf assets"/>
			<arg line="-extdir ${ANES_DIR}"/>
		</exec>
	</target>
	
	<!-- run flexunit -->
	<target name="run-tests">
		<!--
		run project specific tests
		-->
	</target>
	
	<!-- run asdoc -->
	<target name="run-asdoc">
		<!--
		build project specific docs
		-->
	</target>
	
</project>